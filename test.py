import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

x = np.arange(10, 110, 10)
# # RS 
# fccFash = [87.02, 89.44, 89.95, 89.89, 89.98, 90.12, 89.76, 90.16, 89.86, 89.77]
# fccFashParams = [89.94, 82.27, 89.45, 89.97, 86.96, 89.75, 89.85, 90.07, 90.1, 90.09]

# cnnCifar = [68.35, 71.5, 65.71, 67.49, 68.58, 74.41, 73.42, 72.07, 72.64, 75.14]
# cnnCifarParams = [62.68, 70.01, 63.37, 66.05, 69.12, 71.19, 75.81, 70.62, 66.62, 75.10]

# cnnFash = [90.48, 92.73, 91.23, 92.07, 91.82, 92.72, 92.30, 93.16, 92.30, 92.92]
# cnnFashParams = [87.6, 91.8, 90.07, 92.45, 91.98, 91.75, 91.21, 92.56, 91.86, 92.96]

# # NOMAD
# fccFashNom = [89.03, 90.18, 89.37, 89.87, 90.18, 90.11, 90.14, 90.33, 90.22, 89.12]
# cnnCifarNom = [63.44, 74.39, 73.54, 71.55, 70.39, 69.05, 71.89, 74.64, 73.89, 79.39]
# cnnFashNom = [87.69, 91.32, 92.29, 92.19, 93.17, 93.11, 92.83, 92.15, 92.19, 93.4]

# print(np.mean(fccFash), np.mean(fccFashNom))
# print(np.mean(cnnFash), np.mean(cnnFashNom))
# print(np.mean(cnnCifar), np.mean(cnnCifarNom))


# #width = 0.05 # modifier la largeur des bâtons 
# #plt.xlim() # Modifier les limites sur x
# #plt.ylim(100) # Modifier les limites sur y
# plt.title("Performance comparison between random search and subproblem strategy on a CNN with CIFAR-10")
# plt.xlabel("Maxium number of blackbox evaluations")
# plt.ylabel("Best accuracy found (in %)")
# plt.xticks(x)

# #plt.scatter([i+width/2.0 for i in x], height,color='k',s=40) # ajouter un cercle au sommet du bâton
# #plt.axhline(y=100, color='k')
# # for i in range(len(x)):
# #     plt.axvline(x[i], linestyle='--', c='lightgrey')

# plt.plot(x, fccFash, '--bs', label='Random search')
# plt.plot(x, fccFashNom, '--rs', label='Subproblem strategy')
# #plt.plot(x, cnnCifar, 'rs', label='CNN CIFAR-10')
# #plt.plot(x, cnnFash, 'gs', label='CNN Fashion MNIST')
# #plt.bar(x, height, width, color='b')

# plt.legend()
# plt.show()



X = np.arange(1, 101)

hundFccFashion = [88.92, 76.51, 81.87, 10.0, 70.82000000000001, 85.66, 10.0, 10.0, 10.67, 10.0, 78.97, 89.22, 88.61, 10.0, 10.0, 85.41, 10.0, 86.35000000000001, 10.0, 10.0, 10.0, 60.81999999999999, 10.0, 83.15, 10.0, 89.08, 86.46000000000001, 83.28999999999999, 84.45, 77.77, 64.17, 89.57000000000001, 84.78, 10.0, 15.22, 32.23, 59.809999999999995, 10.0, 10.0, 10.0, 73.28, 86.88, 85.5, 88.33, 89.02, 88.38000000000001, 82.87, 85.65, 10.0, 86.08, 88.21, 10.0, 11.4, 87.35000000000001, 84.61, 10.0, 10.0, 82.21000000000001, 63.94, 10.0, 87.42999999999999, 89.14, 10.0, 89.51, 10.0, 86.15, 10.0, 86.78, 25.52, 10.0, 87.69, 88.59, 10.0, 75.77000000000001, 85.38, 86.07000000000001, 70.05, 88.27000000000001, 79.75999999999999, 74.7, 86.65, 89.25999999999999, 82.49, 18.95, 89.66, 87.2, 88.57000000000001, 84.27, 10.0, 88.68, 10.0, 18.029999999999998, 85.00999999999999, 83.76, 10.0, 52.769999999999996, 10.0, 87.24, 10.0, 82.67999999999999]
hundCnnFashion = [91.82000000000001, 86.68, 83.35000000000001, 71.22, 76.16000000000001, 10.0, 81.49, 10.4, 91.13, 91.34, 56.230000000000004, 89.68, 35.69, 82.84, 90.72, 76.6, 86.95, 48.63, 70.92, 10.0, 72.55, 62.470000000000006, 40.19, 75.19, 8.15, 78.45, 29.21, 10.0, 89.16, 91.4, 10.0, 81.27, 85.74000000000001, 10.0, 41.980000000000004, 86.63, 84.32, 59.699999999999996, 51.080000000000005, 78.53999999999999, 30.55, 73.00999999999999, 82.55, 15.27, 0, 80.88, 41.730000000000004, 90.77, 86.19, 11.700000000000001, 90.69, 87.68, 53.14, 77.16, 81.27, 91.58, 82.05, 10.0, 10.0, 86.61, 50.970000000000006, 11.129999999999999, 0, 90.2, 80.89, 69.8, 89.74, 89.78, 75.39, 88.0, 78.93, 10.0, 66.85, 86.1, 13.25, 82.14, 82.56, 88.31, 91.27, 86.57000000000001, 48.6, 20.669999999999998, 10.0, 19.35, 59.8, 32.269999999999996, 85.21, 81.88, 10.0, 57.010000000000005, 10.13, 0, 80.78, 88.01, 10.0, 92.17, 0, 79.93, 10.0, 10.0]
hundCnnCifar = [48.57, 29.020000000000003, 65.4, 61.629999999999995, 53.459999999999994, 16.919999999999998, 56.879999999999995, 10.0, 16.8, 23.27, 8.74, 0, 0, 10.0, 56.28999999999999, 65.36999999999999, 58.86, 67.24, 10.54, 11.379999999999999, 10.22, 41.949999999999996, 27.48, 64.73, 48.55, 0, 0, 11.76, 47.71, 45.39, 50.029999999999994, 10.0, 10.0, 11.200000000000001, 49.75, 74.72, 20.84, 36.18, 59.760000000000005, 0, 10.0, 26.21, 58.57, 52.59, 27.42, 13.54, 9.83, 61.38, 7.19, 61.6, 10.61, 10.489999999999998, 25.95, 0, 59.11, 49.89, 16.16, 53.11, 46.239999999999995, 28.860000000000003, 53.879999999999995, 29.54, 60.01, 60.81999999999999, 10.0, 49.1, 51.800000000000004, 14.45, 57.84, 12.0, 26.0, 54.300000000000004, 24.38, 63.4, 48.18, 58.989999999999995, 35.99, 15.02, 22.15, 56.599999999999994, 33.56, 46.64, 11.49, 21.11, 55.58, 36.1, 53.2, 42.24, 0, 15.1, 31.64, 47.83, 67.80000000000001, 9.969999999999999, 0, 67.46, 51.61, 63.77, 32.190000000000005, 51.2]

hundParaFccFashion = [19.73, 10.0, 10.290000000000001, 10.0, 10.0, 10.0, 88.53999999999999, 80.31, 77.32, 10.0, 27.16, 57.15, 64.69, 86.11999999999999, 85.11, 23.080000000000002, 84.78, 70.06, 10.0, 10.0, 18.59, 10.0, 24.69, 16.09, 86.05000000000001, 59.940000000000005, 85.84, 10.0, 10.040000000000001, 26.96, 10.0, 35.23, 10.0, 87.83, 10.0, 12.3, 85.56, 14.95, 84.46000000000001, 9.87, 70.83, 88.16000000000001, 43.54, 10.0, 8.68, 10.0, 10.0, 6.25, 86.79, 88.86, 87.37, 84.45, 87.02, 10.870000000000001, 10.0, 10.6, 47.27, 12.09, 10.0, 10.0, 61.550000000000004, 26.68, 58.309999999999995, 13.209999999999999, 82.1, 66.67999999999999, 10.0, 10.0, 85.00999999999999, 82.21000000000001, 84.63000000000001, 10.0, 60.29, 86.44, 71.82, 70.56, 10.0, 87.92999999999999, 10.0, 85.76, 87.03999999999999, 89.77000000000001, 35.05, 10.0, 73.83, 82.24000000000001, 10.0, 10.0, 88.86, 10.0, 10.0, 10.0, 83.72, 10.0, 10.0, 10.0, 82.69999999999999, 72.99, 10.0, 81.51]
hundParaCnnFashion = [14.52, 12.08, 86.59, 78.59, 83.09, 40.089999999999996, 10.0, 10.0, 74.68, 77.5, 10.0, 10.0, 87.66000000000001, 83.28999999999999, 7.180000000000001, 12.73, 10.01, 79.58, 19.45, 64.09, 87.02, 0, 82.67999999999999, 68.37, 10.0, 10.05, 87.71, 0, 10.0, 10.0, 71.78999999999999, 55.06999999999999, 8.14, 85.39999999999999, 78.92, 56.03, 56.76, 63.190000000000005, 0, 56.42, 13.59, 15.64, 83.94, 10.0, 33.71, 9.45, 21.26, 10.0, 62.78, 12.91, 77.34, 17.740000000000002, 10.0, 10.84, 71.49, 10.0, 8.63, 0, 54.1, 82.59, 10.0, 9.99, 7.22, 6.65, 0, 66.08000000000001, 86.28, 85.46000000000001, 10.0, 68.06, 12.879999999999999, 82.0, 86.32, 71.52, 10.0, 79.3, 64.97, 8.5, 10.0, 80.49, 60.5, 10.0, 86.49, 0, 89.49000000000001, 92.32000000000001, 10.0, 14.95, 10.0, 17.630000000000003, 10.0, 67.05, 74.19, 81.88, 81.8, 10.0, 0, 0, 10.0, 11.17]
hundParaCnnCifar = [34.92, 9.43, 29.09, 27.92, 9.78, 0, 9.98, 0, 25.96, 17.14, 14.430000000000001, 67.33, 51.12, 20.28, 10.0, 16.08, 10.0, 0, 8.02, 10.190000000000001, 11.14, 61.06, 11.66, 13.239999999999998, 42.83, 44.24, 10.0, 10.22, 13.55, 10.66, 18.6, 9.9, 18.26, 42.19, 66.13, 57.43000000000001, 13.68, 12.08, 10.0, 13.450000000000001, 25.27, 53.44, 13.450000000000001, 0, 42.27, 9.719999999999999, 10.45, 13.63, 12.47, 9.83, 18.42, 16.16, 60.89, 11.16, 10.0, 58.4, 11.62, 8.51, 34.97, 10.0, 40.0, 10.13, 10.0, 10.0, 58.52, 41.92, 28.000000000000004, 17.73, 14.940000000000001, 0, 0, 34.55, 29.26, 15.73, 18.529999999999998, 54.7, 28.87, 73.1, 9.25, 10.0, 11.05, 13.930000000000001, 68.04, 34.74, 0, 35.67, 10.0, 10.0, 19.43, 10.13, 9.08, 44.26, 54.32, 9.82, 11.43, 13.020000000000001, 0, 10.0, 14.05, 29.5]

plt.title("Convergence ")
plt.xlabel("Iterations (= blackbox evaluations)")
plt.ylabel("Accuracy found (in %)")
plt.xticks()

plt.plot(X, hundCnnCifar, '--o', label='Default optimizer parameters')
plt.plot(X, hundParaCnnCifar, '--o', label='Variable optimizer parameters')
plt.legend()
plt.show()